"use strict";
<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePackageListAsync = generatePackageListAsync;
exports.generateModulesProviderAsync = generateModulesProviderAsync;
const platforms_1 = require("../platforms");
/** Generates a source file listing all packages to link (Android-only) */
async function generatePackageListAsync(modules, params) {
    const platformLinking = (0, platforms_1.getLinkingImplementationForPlatform)(params.platform);
    if (!('generatePackageListAsync' in platformLinking)) {
        throw new Error(`Generating package list is not available for platform "${params.platform}"`);
    }
    await platformLinking.generatePackageListAsync(modules, params.targetPath, params.namespace);
}
/** Generates ExpoModulesProvider file listing all packages to link (Apple-only)
 */
async function generateModulesProviderAsync(modules, params) {
    const platformLinking = (0, platforms_1.getLinkingImplementationForPlatform)(params.platform);
    if (!('generateModulesProviderAsync' in platformLinking)) {
        throw new Error(`Generating modules provider is not available for platform "${params.platform}"`);
    }
    await platformLinking.generateModulesProviderAsync(modules, params.targetPath, params.entitlementPath);
=======
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePackageListAsync = generatePackageListAsync;
exports.generateModulesProviderAsync = generateModulesProviderAsync;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("./utils");
/**
 * Generates a source file listing all packages to link.
 * Right know it works only for Android platform.
 */
async function generatePackageListAsync(modules, options) {
    try {
        const platformLinking = (0, utils_1.getLinkingImplementationForPlatform)(options.platform);
        await platformLinking.generatePackageListAsync(modules, options.target, options.namespace);
    }
    catch (e) {
        console.error(chalk_1.default.red(`Generating package list is not available for platform: ${options.platform}`));
        throw e;
    }
}
/**
 * Generates ExpoModulesProvider file listing all packages to link.
 * Right know it works only for Apple platforms.
 */
async function generateModulesProviderAsync(modules, options) {
    try {
        const platformLinking = (0, utils_1.getLinkingImplementationForPlatform)(options.platform);
        await platformLinking.generateModulesProviderAsync(modules, options.target, options.entitlement);
    }
    catch (e) {
        console.error(chalk_1.default.red(`Generating modules provider is not available for platform: ${options.platform}`));
        throw e;
    }
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
}
//# sourceMappingURL=generatePackageList.js.map