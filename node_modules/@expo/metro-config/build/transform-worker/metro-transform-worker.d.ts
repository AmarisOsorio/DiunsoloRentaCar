<<<<<<< HEAD
/**
 * Copyright 2023-present 650 Industries (Expo). All rights reserved.
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Fork of the Metro transformer worker, but with additional transforms moved to `babel-preset-expo` and modifications made for web support.
 * https://github.com/facebook/metro/blob/412771475c540b6f85d75d9dcd5a39a6e0753582/packages/metro-transform-worker/src/index.js#L1
 */
import { types as t } from '@babel/core';
import type { ParseResult } from '@babel/core';
import type { MetroSourceMapSegmentTuple } from '@expo/metro/metro-source-map';
import type { JsTransformerConfig, JsTransformOptions } from '@expo/metro/metro-transform-worker';
=======
import * as babylon from '@babel/parser';
import * as t from '@babel/types';
import type { MetroSourceMapSegmentTuple } from 'metro-source-map';
import { JsTransformerConfig, JsTransformOptions } from 'metro-transform-worker';
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
import { InvalidRequireCallError as InternalInvalidRequireCallError, CollectedDependencies, Options as CollectDependenciesOptions } from './collect-dependencies';
import { ExpoJsOutput } from '../serializer/jsOutput';
export { JsTransformOptions };
interface TransformResponse {
    readonly dependencies: CollectedDependencies['dependencies'];
    readonly output: readonly ExpoJsOutput[];
}
export declare class InvalidRequireCallError extends Error {
    innerError: InternalInvalidRequireCallError;
    filename: string;
    constructor(innerError: InternalInvalidRequireCallError, filename: string);
}
export declare const minifyCode: (config: Pick<JsTransformerConfig, "minifierPath" | "minifierConfig">, filename: string, code: string, source: string, map: MetroSourceMapSegmentTuple[], reserved?: string[]) => Promise<{
    code: string;
    map: MetroSourceMapSegmentTuple[];
}>;
export declare function applyImportSupport<TFile extends t.File>(ast: TFile, { filename, options, importDefault, importAll, collectLocations, }: {
    filename: string;
<<<<<<< HEAD
    options: Pick<JsTransformOptions, 'experimentalImportSupport' | 'inlineRequires' | 'nonInlinedRequires' | 'customTransformOptions'>;
=======
    options: Pick<JsTransformOptions, 'experimentalImportSupport' | 'inlineRequires' | 'nonInlinedRequires'>;
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    importDefault: string;
    importAll: string;
    collectLocations?: boolean;
}): {
    ast: TFile;
    metadata?: any;
};
export declare function transform(config: JsTransformerConfig, projectRoot: string, filename: string, data: Buffer, options: JsTransformOptions): Promise<TransformResponse>;
export declare function getCacheKey(config: JsTransformerConfig): string;
<<<<<<< HEAD
export declare function collectDependenciesForShaking(ast: ParseResult, options: CollectDependenciesOptions): Readonly<{
    ast: import("@babel/parser").ParseResult<t.File>;
=======
export declare function collectDependenciesForShaking(ast: babylon.ParseResult<t.File>, options: CollectDependenciesOptions): Readonly<{
    ast: babylon.ParseResult<t.File>;
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    dependencyMapName: string;
    dependencies: readonly Readonly<{
        data: import("./collect-dependencies").DependencyData;
        name: string;
    }>[];
}>;
