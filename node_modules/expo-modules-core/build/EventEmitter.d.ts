<<<<<<< HEAD
import { EventsMap } from './ts-declarations/EventEmitter';
import type { ExpoGlobal } from './ts-declarations/global';
=======
import type { EventEmitter } from './ts-declarations/EventEmitter';
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
/**
 * A subscription object that allows to conveniently remove an event listener from the emitter.
 */
export interface EventSubscription {
    /**
     * Removes an event listener for which the subscription has been created.
     * After calling this function, the listener will no longer receive any events from the emitter.
     */
    remove(): void;
}
<<<<<<< HEAD
export type EventEmitter<TEventsMap extends EventsMap = Record<never, never>> = typeof ExpoGlobal.EventEmitter<TEventsMap>;
export declare const EventEmitter: typeof ExpoGlobal.EventEmitter;
=======
declare const _default: typeof EventEmitter;
export default _default;
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
//# sourceMappingURL=EventEmitter.d.ts.map