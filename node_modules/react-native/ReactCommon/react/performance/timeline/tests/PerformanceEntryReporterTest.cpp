/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include <ostream>

#include <gtest/gtest.h>

#include "../PerformanceEntryReporter.h"

<<<<<<< HEAD
#include <variant>

=======
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
using namespace facebook::react;

namespace facebook::react {

[[maybe_unused]] static bool operator==(
    const PerformanceEntry& lhs,
    const PerformanceEntry& rhs) {
<<<<<<< HEAD
  return std::visit(
      [&](const auto& left, const auto& right) {
        bool baseMatch = left.name == right.name &&
            left.entryType == right.entryType &&
            left.startTime == right.startTime &&
            left.duration == right.duration;

        if (baseMatch && left.entryType == PerformanceEntryType::EVENT) {
          auto leftEventTiming = std::get<PerformanceEventTiming>(lhs);
          auto rightEventTiming = std::get<PerformanceEventTiming>(rhs);

          return leftEventTiming.processingStart ==
              rightEventTiming.processingStart &&
              leftEventTiming.processingEnd == rightEventTiming.processingEnd &&
              leftEventTiming.interactionId == rightEventTiming.interactionId;
        }

        return baseMatch;
      },
      lhs,
      rhs);
=======
  return lhs.name == rhs.name && lhs.entryType == rhs.entryType &&
      lhs.startTime == rhs.startTime && lhs.duration == rhs.duration &&
      lhs.processingStart == rhs.processingStart &&
      lhs.processingEnd == rhs.processingEnd &&
      lhs.interactionId == rhs.interactionId;
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
}

[[maybe_unused]] static std::ostream& operator<<(
    std::ostream& os,
    const PerformanceEntry& entry) {
  static constexpr const char* entryTypeNames[] = {
      "PerformanceEntryType::UNDEFINED",
      "PerformanceEntryType::MARK",
      "PerformanceEntryType::MEASURE",
      "PerformanceEntryType::EVENT",
<<<<<<< HEAD
      "PerformanceEntryType::RESOURCE",
  };

  return std::visit(
      [&](const auto& entryDetails) -> std::ostream& {
        os << "{ .name = \"" << entryDetails.name << "\"" << ", .entryType = "
           << entryTypeNames[static_cast<int>(entryDetails.entryType) - 1]
           << ", .startTime = "
           << entryDetails.startTime.toDOMHighResTimeStamp()
           << ", .duration = " << entryDetails.duration.toDOMHighResTimeStamp()
           << " }";
        return os;
      },
      entry);
}

=======
  };
  return os << "{ .name = \"" << entry.name << "\"" << ", .entryType = "
            << entryTypeNames[static_cast<int>(entry.entryType)]
            << ", .startTime = " << entry.startTime
            << ", .duration = " << entry.duration << " }";
}
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
} // namespace facebook::react

namespace {
std::vector<PerformanceEntry> toSorted(
    std::vector<PerformanceEntry>&& entries) {
  std::stable_sort(entries.begin(), entries.end(), PerformanceEntrySorter{});
  return entries;
}
} // namespace

TEST(PerformanceEntryReporter, PerformanceEntryReporterTestReportMarks) {
  auto reporter = PerformanceEntryReporter::getInstance();
<<<<<<< HEAD
  auto timeOrigin = HighResTimeStamp::now();

  reporter->clearEntries();

  reporter->reportMark("mark0", timeOrigin);
  reporter->reportMark(
      "mark1", timeOrigin + HighResDuration::fromMilliseconds(1));
  reporter->reportMark(
      "mark2", timeOrigin + HighResDuration::fromMilliseconds(2));
  // Report mark0 again
  reporter->reportMark(
      "mark0", timeOrigin + HighResDuration::fromMilliseconds(3));
=======

  reporter->clearEntries();

  reporter->reportMark("mark0", 0);
  reporter->reportMark("mark1", 1);
  reporter->reportMark("mark2", 2);
  // Report mark0 again
  reporter->reportMark("mark0", 3);
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  const auto entries = toSorted(reporter->getEntries());

  ASSERT_EQ(4, entries.size());

  const std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
      PerformanceMark{
          {.name = "mark0",
           .startTime = timeOrigin,
           .duration = HighResDuration::zero()}},
      PerformanceMark{
          {.name = "mark1",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
           .duration = HighResDuration::zero()}},
      PerformanceMark{
          {.name = "mark2",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(2),
           .duration = HighResDuration::zero()}},
      PerformanceMark{
          {.name = "mark0",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(3),
           .duration = HighResDuration::zero()}}};
=======
      {.name = "mark0",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 0,
       .duration = 0},
      {.name = "mark1",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 1,
       .duration = 0},
      {.name = "mark2",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 2,
       .duration = 0},
      {.name = "mark0",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 3,
       .duration = 0}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  ASSERT_EQ(expected, entries);
}

TEST(PerformanceEntryReporter, PerformanceEntryReporterTestReportMeasures) {
  auto reporter = PerformanceEntryReporter::getInstance();
<<<<<<< HEAD
  auto timeOrigin = HighResTimeStamp::now();
  reporter->clearEntries();

  reporter->reportMark("mark0", timeOrigin);
  reporter->reportMark(
      "mark1", timeOrigin + HighResDuration::fromMilliseconds(1));
  reporter->reportMark(
      "mark2", timeOrigin + HighResDuration::fromMilliseconds(2));

  reporter->reportMeasure(
      "measure0",
      timeOrigin,
      timeOrigin + HighResDuration::fromMilliseconds(2));
  reporter->reportMeasure(
      "measure1",
      timeOrigin,
      timeOrigin + HighResDuration::fromMilliseconds(3));

  reporter->reportMark(
      "mark3", timeOrigin + HighResDuration::fromNanoseconds(2.5 * 1e6));
  reporter->reportMeasure(
      "measure2",
      timeOrigin + HighResDuration::fromMilliseconds(2),
      timeOrigin + HighResDuration::fromMilliseconds(2));
  reporter->reportMark(
      "mark4", timeOrigin + HighResDuration::fromMilliseconds(3));
=======
  reporter->clearEntries();

  reporter->reportMark("mark0", 0);
  reporter->reportMark("mark1", 1);
  reporter->reportMark("mark2", 2);

  reporter->reportMeasure("measure0", 0, 2);
  reporter->reportMeasure("measure1", 0, 2, 4);
  reporter->reportMeasure("measure2", 0, 0, std::nullopt, "mark1", "mark2");
  reporter->reportMeasure("measure3", 0, 0, 5, "mark1");
  reporter->reportMeasure(
      "measure4", 1.5, 0, std::nullopt, std::nullopt, "mark2");

  reporter->setTimeStampProvider([]() { return 3.5; });
  reporter->reportMeasure("measure5", 0, 0, std::nullopt, "mark2");

  reporter->reportMark("mark3", 2.5);
  reporter->reportMeasure("measure6", 2.0, 2.0);
  reporter->reportMark("mark4", 2.1);
  reporter->reportMark("mark4", 3.0);
  // Uses the last reported time for mark4
  reporter->reportMeasure("measure7", 0, 0, std::nullopt, "mark1", "mark4");
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  const auto entries = toSorted(reporter->getEntries());

  const std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
      PerformanceMark{
          {.name = "mark0",
           .startTime = timeOrigin,
           .duration = HighResDuration::zero()}},
      PerformanceMeasure{
          {.name = "measure0",
           .startTime = timeOrigin,
           .duration = HighResDuration::fromMilliseconds(2)}},
      PerformanceMeasure{
          {.name = "measure1",
           .startTime = timeOrigin,
           .duration = HighResDuration::fromMilliseconds(3)}},
      PerformanceMark{
          {.name = "mark1",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
           .duration = HighResDuration::zero()}},
      PerformanceMark{
          {.name = "mark2",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(2),
           .duration = HighResDuration::zero()}},
      PerformanceMeasure{
          {.name = "measure2",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(2),
           .duration = HighResDuration::zero()}},
      PerformanceMark{
          {.name = "mark3",
           .startTime =
               timeOrigin + HighResDuration::fromNanoseconds(2.5 * 1e6),
           .duration = HighResDuration::zero()}},
      PerformanceMark{
          {.name = "mark4",
           .startTime = timeOrigin + HighResDuration::fromMilliseconds(3),
           .duration = HighResDuration::zero()}}};
=======
      {.name = "mark0",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 0,
       .duration = 0},
      {.name = "measure0",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 0,
       .duration = 2},
      {.name = "measure1",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 0,
       .duration = 4},
      {.name = "mark1",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 1,
       .duration = 0},
      {.name = "measure2",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 1,
       .duration = 1},
      {.name = "measure7",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 1,
       .duration = 2},
      {.name = "measure3",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 1,
       .duration = 5},
      {.name = "measure4",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 1.5,
       .duration = 0.5},
      {.name = "mark2",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 2,
       .duration = 0},
      {.name = "measure6",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 2,
       .duration = 0},
      {.name = "measure5",
       .entryType = PerformanceEntryType::MEASURE,
       .startTime = 2,
       .duration = 1.5},
      {.name = "mark4",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 2.1,
       .duration = 0},
      {.name = "mark3",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 2.5,
       .duration = 0},
      {.name = "mark4",
       .entryType = PerformanceEntryType::MARK,
       .startTime = 3,
       .duration = 0}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  ASSERT_EQ(expected, entries);
}

TEST(PerformanceEntryReporter, PerformanceEntryReporterTestGetEntries) {
  auto reporter = PerformanceEntryReporter::getInstance();
<<<<<<< HEAD
  auto timeOrigin = HighResTimeStamp::now();
=======
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  reporter->clearEntries();

  {
    const auto entries = reporter->getEntries();
    ASSERT_EQ(0, entries.size());
  }

<<<<<<< HEAD
  reporter->reportMark("common_name", timeOrigin);
  reporter->reportMark(
      "mark1", timeOrigin + HighResDuration::fromMilliseconds(1));
  reporter->reportMark(
      "mark2", timeOrigin + HighResDuration::fromMilliseconds(2));

  reporter->reportMeasure(
      "common_name",
      timeOrigin,
      timeOrigin + HighResDuration::fromMilliseconds(2));
  reporter->reportMeasure(
      "measure1",
      timeOrigin,
      timeOrigin + HighResDuration::fromMilliseconds(3));
  reporter->reportMeasure(
      "measure2",
      timeOrigin + HighResDuration::fromMilliseconds(1),
      timeOrigin + HighResDuration::fromMilliseconds(6));
  reporter->reportMeasure(
      "measure3",
      timeOrigin + HighResDuration::fromNanoseconds(1.5 * 1e6),
      timeOrigin + HighResDuration::fromMilliseconds(2));
=======
  reporter->reportMark("common_name", 0);
  reporter->reportMark("mark1", 1);
  reporter->reportMark("mark2", 2);

  reporter->reportMeasure("common_name", 0, 2);
  reporter->reportMeasure("measure1", 0, 2, 4);
  reporter->reportMeasure("measure2", 0, 0, std::nullopt, "mark1", "mark2");
  reporter->reportMeasure("measure3", 0, 0, 5, "mark1");
  reporter->reportMeasure(
      "measure4", 1.5, 0, std::nullopt, std::nullopt, "mark2");
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  {
    const auto allEntries = toSorted(reporter->getEntries());
    const std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
        PerformanceMark{
            {.name = "common_name",
             .startTime = timeOrigin,
             .duration = HighResDuration::zero()}},
        PerformanceMeasure{
            {.name = "common_name",
             .startTime = timeOrigin,
             .duration = HighResDuration::fromMilliseconds(2)}},
        PerformanceMeasure{
            {.name = "measure1",
             .startTime = timeOrigin,
             .duration = HighResDuration::fromMilliseconds(3)}},
        PerformanceMark{
            {.name = "mark1",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
             .duration = HighResDuration::zero()}},
        PerformanceMeasure{
            {.name = "measure2",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
             .duration = HighResDuration::fromMilliseconds(5)}},
        PerformanceMeasure{
            {.name = "measure3",
             .startTime =
                 timeOrigin + HighResDuration::fromNanoseconds(1.5 * 1e6),
             .duration = HighResDuration::fromNanoseconds(0.5 * 1e6)}},
        PerformanceMark{
            {.name = "mark2",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(2),
             .duration = HighResDuration::zero()}}};
=======
        {.name = "common_name",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 0,
         .duration = 0},
        {.name = "common_name",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 0,
         .duration = 2},
        {.name = "measure1",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 0,
         .duration = 4},
        {.name = "mark1",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 1,
         .duration = 0},
        {.name = "measure2",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 1,
         .duration = 1},
        {.name = "measure3",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 1,
         .duration = 5},
        {.name = "measure4",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 1.5,
         .duration = 0.5},
        {.name = "mark2",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 2,
         .duration = 0}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    ASSERT_EQ(expected, allEntries);
  }

  {
    const auto marks =
        toSorted(reporter->getEntries(PerformanceEntryType::MARK));
    const std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
        PerformanceMark{
            {.name = "common_name",
             .startTime = timeOrigin,
             .duration = HighResDuration::zero()}},
        PerformanceMark{
            {.name = "mark1",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
             .duration = HighResDuration::zero()}},
        PerformanceMark{
            {.name = "mark2",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(2),
             .duration = HighResDuration::zero()}}};
=======
        {.name = "common_name",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 0,
         .duration = 0},
        {.name = "mark1",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 1,
         .duration = 0},
        {.name = "mark2",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 2,
         .duration = 0}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    ASSERT_EQ(expected, marks);
  }

  {
    const auto measures =
        toSorted(reporter->getEntries(PerformanceEntryType::MEASURE));
    const std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
        PerformanceMeasure{
            {.name = "common_name",
             .startTime = timeOrigin,
             .duration = HighResDuration::fromMilliseconds(2)}},
        PerformanceMeasure{
            {.name = "measure1",
             .startTime = timeOrigin,
             .duration = HighResDuration::fromMilliseconds(3)}},
        PerformanceMeasure{
            {.name = "measure2",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
             .duration = HighResDuration::fromMilliseconds(5)}},
        PerformanceMeasure{
            {.name = "measure3",
             .startTime =
                 timeOrigin + HighResDuration::fromNanoseconds(1.5 * 1e6),
             .duration = HighResDuration::fromNanoseconds(0.5 * 1e6)}}};
=======
        {.name = "common_name",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 0,
         .duration = 2},
        {.name = "measure1",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 0,
         .duration = 4},
        {.name = "measure2",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 1,
         .duration = 1},
        {.name = "measure3",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 1,
         .duration = 5},
        {.name = "measure4",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 1.5,
         .duration = 0.5}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    ASSERT_EQ(expected, measures);
  }

  {
    const std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
        PerformanceMark{{.name = "common_name", .startTime = timeOrigin}}};
=======
        {.name = "common_name",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 0}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    const auto commonName =
        reporter->getEntries(PerformanceEntryType::MARK, "common_name");
    ASSERT_EQ(expected, commonName);
  }

  {
<<<<<<< HEAD
    const std::vector<PerformanceEntry> expected = {PerformanceMeasure{
        {.name = "common_name",
         .startTime = timeOrigin,
         .duration = HighResDuration::fromMilliseconds(2)}}};
=======
    const std::vector<PerformanceEntry> expected = {
        {.name = "common_name",
         .entryType = PerformanceEntryType::MEASURE,
         .startTime = 0,
         .duration = 2}};
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    const auto commonName =
        reporter->getEntries(PerformanceEntryType::MEASURE, "common_name");
    ASSERT_EQ(expected, commonName);
  }
}

TEST(PerformanceEntryReporter, PerformanceEntryReporterTestClearMarks) {
  auto reporter = PerformanceEntryReporter::getInstance();
<<<<<<< HEAD
  auto timeOrigin = HighResTimeStamp::now();
  reporter->clearEntries();

  reporter->reportMark("common_name", timeOrigin);
  reporter->reportMark(
      "mark1", timeOrigin + HighResDuration::fromMilliseconds(1));
  reporter->reportMark(
      "mark1", timeOrigin + HighResDuration::fromNanoseconds(2.1 * 1e6));
  reporter->reportMark(
      "mark2", timeOrigin + HighResDuration::fromMilliseconds(2));

  reporter->reportMeasure(
      "common_name",
      timeOrigin,
      timeOrigin + HighResDuration::fromMilliseconds(2));
  reporter->reportMeasure(
      "measure1",
      timeOrigin,
      timeOrigin + HighResDuration::fromMilliseconds(3));
  reporter->reportMeasure(
      "measure2",
      timeOrigin + HighResDuration::fromMilliseconds(1),
      timeOrigin + HighResDuration::fromMilliseconds(6));
  reporter->reportMeasure(
      "measure3",
      timeOrigin + HighResDuration::fromNanoseconds(1.5 * 1e6),
      timeOrigin + HighResDuration::fromMilliseconds(2));
=======
  reporter->clearEntries();

  reporter->reportMark("common_name", 0);
  reporter->reportMark("mark1", 1);
  reporter->reportMark("mark1", 2.1);
  reporter->reportMark("mark2", 2);

  reporter->reportMeasure("common_name", 0, 2);
  reporter->reportMeasure("measure1", 0, 2, 4);
  reporter->reportMeasure("measure2", 0, 0, std::nullopt, "mark1", "mark2");
  reporter->reportMeasure("measure3", 0, 0, 5, "mark1");
  reporter->reportMeasure(
      "measure4", 1.5, 0, std::nullopt, std::nullopt, "mark2");
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  reporter->clearEntries(PerformanceEntryType::MARK, "common_name");

  {
    auto entries = toSorted(reporter->getEntries(PerformanceEntryType::MARK));
    std::vector<PerformanceEntry> expected = {
<<<<<<< HEAD
        PerformanceMark{
            {.name = "mark1",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(1),
             .duration = HighResDuration::zero()}},
        PerformanceMark{
            {.name = "mark2",
             .startTime = timeOrigin + HighResDuration::fromMilliseconds(2),
             .duration = HighResDuration::zero()}},
        PerformanceMark{
            {.name = "mark1",
             .startTime =
                 timeOrigin + HighResDuration::fromNanoseconds(2.1 * 1e6),
             .duration = HighResDuration::zero()}},
=======
        {.name = "mark1",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 1,
         .duration = 0},
        {.name = "mark2",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 2,
         .duration = 0},
        {.name = "mark1",
         .entryType = PerformanceEntryType::MARK,
         .startTime = 2.1,
         .duration = 0},
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
    };
    ASSERT_EQ(expected, entries);
  }

  reporter->clearEntries(PerformanceEntryType::MARK);

  {
    auto entries = reporter->getEntries(PerformanceEntryType::MARK);
    ASSERT_EQ(entries.size(), 0);
  }

  reporter->clearEntries();

  {
    auto entries = reporter->getEntries();
    ASSERT_EQ(entries.size(), 0);
  }
}
