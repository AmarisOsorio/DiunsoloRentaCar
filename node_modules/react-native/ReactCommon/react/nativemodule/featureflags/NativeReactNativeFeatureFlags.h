/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
<<<<<<< HEAD
 * @generated SignedSource<<d1862a9ce3cfeda5d140941fcd3b25bc>>
=======
 * @generated SignedSource<<0009cf8a05d254e3695e7ce57fc5f8af>>
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
 */

/**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags --update
 */

#pragma once

<<<<<<< HEAD
#if __has_include("FBReactNativeSpecJSI.h") // CocoaPod headers on Apple
=======
#if __has_include("rncoreJSI.h") // Cmake headers on Android
#include "rncoreJSI.h"
#elif __has_include("FBReactNativeSpecJSI.h") // CocoaPod headers on Apple
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
#include "FBReactNativeSpecJSI.h"
#else
#include <FBReactNativeSpec/FBReactNativeSpecJSI.h>
#endif

namespace facebook::react {

class NativeReactNativeFeatureFlags
<<<<<<< HEAD
    : public NativeReactNativeFeatureFlagsCxxSpecJSI {
 public:
  NativeReactNativeFeatureFlags(std::shared_ptr<CallInvoker> jsInvoker);

  static constexpr std::string_view kModuleName = "NativeReactNativeFeatureFlagsCxx";

=======
    : public NativeReactNativeFeatureFlagsCxxSpec<
          NativeReactNativeFeatureFlags> {
 public:
  NativeReactNativeFeatureFlags(std::shared_ptr<CallInvoker> jsInvoker);

>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  bool commonTestFlag(jsi::Runtime& runtime);

  bool commonTestFlagWithoutNativeImplementation(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool animatedShouldSignalBatch(jsi::Runtime& runtime);

  bool cxxNativeAnimatedEnabled(jsi::Runtime& runtime);

  bool cxxNativeAnimatedRemoveJsSync(jsi::Runtime& runtime);

  bool disableMainQueueSyncDispatchIOS(jsi::Runtime& runtime);

  bool disableMountItemReorderingAndroid(jsi::Runtime& runtime);

  bool disableTextLayoutManagerCacheAndroid(jsi::Runtime& runtime);

  bool enableAccessibilityOrder(jsi::Runtime& runtime);

  bool enableAccumulatedUpdatesInRawPropsAndroid(jsi::Runtime& runtime);

  bool enableAndroidTextMeasurementOptimizations(jsi::Runtime& runtime);

=======
  bool disableMountItemReorderingAndroid(jsi::Runtime& runtime);

  bool enableAccumulatedUpdatesInRawPropsAndroid(jsi::Runtime& runtime);

>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  bool enableBridgelessArchitecture(jsi::Runtime& runtime);

  bool enableCppPropsIteratorSetter(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool enableCustomFocusSearchOnClippedElementsAndroid(jsi::Runtime& runtime);

  bool enableDestroyShadowTreeRevisionAsync(jsi::Runtime& runtime);

  bool enableDoubleMeasurementFixAndroid(jsi::Runtime& runtime);

=======
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  bool enableEagerRootViewAttachment(jsi::Runtime& runtime);

  bool enableFabricLogs(jsi::Runtime& runtime);

  bool enableFabricRenderer(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool enableFixForParentTagDuringReparenting(jsi::Runtime& runtime);

  bool enableFontScaleChangesUpdatingLayout(jsi::Runtime& runtime);

  bool enableIOSTextBaselineOffsetPerLine(jsi::Runtime& runtime);

  bool enableIOSViewClipToPaddingBox(jsi::Runtime& runtime);

  bool enableInteropViewManagerClassLookUpOptimizationIOS(jsi::Runtime& runtime);
=======
  bool enableIOSViewClipToPaddingBox(jsi::Runtime& runtime);

  bool enableImagePrefetchingAndroid(jsi::Runtime& runtime);

  bool enableJSRuntimeGCOnMemoryPressureOnIOS(jsi::Runtime& runtime);
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  bool enableLayoutAnimationsOnAndroid(jsi::Runtime& runtime);

  bool enableLayoutAnimationsOnIOS(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool enableMainQueueCoordinatorOnIOS(jsi::Runtime& runtime);

  bool enableMainQueueModulesOnIOS(jsi::Runtime& runtime);

  bool enableModuleArgumentNSNullConversionIOS(jsi::Runtime& runtime);

  bool enableNativeCSSParsing(jsi::Runtime& runtime);

  bool enableNetworkEventReporting(jsi::Runtime& runtime);

  bool enableNewBackgroundAndBorderDrawables(jsi::Runtime& runtime);

  bool enablePreparedTextLayout(jsi::Runtime& runtime);

  bool enablePropsUpdateReconciliationAndroid(jsi::Runtime& runtime);

  bool enableResourceTimingAPI(jsi::Runtime& runtime);

  bool enableSynchronousStateUpdates(jsi::Runtime& runtime);

=======
  bool enableLongTaskAPI(jsi::Runtime& runtime);

  bool enableNativeCSSParsing(jsi::Runtime& runtime);

  bool enableNewBackgroundAndBorderDrawables(jsi::Runtime& runtime);

  bool enablePreciseSchedulingForPremountItemsOnAndroid(jsi::Runtime& runtime);

  bool enablePropsUpdateReconciliationAndroid(jsi::Runtime& runtime);

  bool enableReportEventPaintTime(jsi::Runtime& runtime);

  bool enableSynchronousStateUpdates(jsi::Runtime& runtime);

  bool enableUIConsistency(jsi::Runtime& runtime);

>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  bool enableViewCulling(jsi::Runtime& runtime);

  bool enableViewRecycling(jsi::Runtime& runtime);

  bool enableViewRecyclingForText(jsi::Runtime& runtime);

  bool enableViewRecyclingForView(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool enableVirtualViewDebugFeatures(jsi::Runtime& runtime);

  bool enableVirtualViewRenderState(jsi::Runtime& runtime);

  bool enableVirtualViewWindowFocusDetection(jsi::Runtime& runtime);

  bool fixMappingOfEventPrioritiesBetweenFabricAndReact(jsi::Runtime& runtime);

=======
  bool excludeYogaFromRawProps(jsi::Runtime& runtime);

  bool fixDifferentiatorEmittingUpdatesWithWrongParentTag(jsi::Runtime& runtime);

  bool fixMappingOfEventPrioritiesBetweenFabricAndReact(jsi::Runtime& runtime);

  bool fixMountingCoordinatorReportedPendingTransactionsOnAndroid(jsi::Runtime& runtime);

>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  bool fuseboxEnabledRelease(jsi::Runtime& runtime);

  bool fuseboxNetworkInspectionEnabled(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool hideOffscreenVirtualViewsOnIOS(jsi::Runtime& runtime);

  double preparedTextCacheSize(jsi::Runtime& runtime);

  bool preventShadowTreeCommitExhaustion(jsi::Runtime& runtime);
=======
  bool lazyAnimationCallbacks(jsi::Runtime& runtime);

  bool removeTurboModuleManagerDelegateMutex(jsi::Runtime& runtime);

  bool throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS(jsi::Runtime& runtime);
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767

  bool traceTurboModulePromiseRejectionsOnAndroid(jsi::Runtime& runtime);

  bool updateRuntimeShadowNodeReferencesOnCommit(jsi::Runtime& runtime);

  bool useAlwaysAvailableJSErrorHandling(jsi::Runtime& runtime);

  bool useFabricInterop(jsi::Runtime& runtime);

<<<<<<< HEAD
  bool useNativeEqualsInNativeReadableArrayAndroid(jsi::Runtime& runtime);

  bool useNativeTransformHelperAndroid(jsi::Runtime& runtime);

=======
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
  bool useNativeViewConfigsInBridgelessMode(jsi::Runtime& runtime);

  bool useOptimizedEventBatchingOnAndroid(jsi::Runtime& runtime);

  bool useRawPropsJsiValue(jsi::Runtime& runtime);

  bool useShadowNodeStateOnClone(jsi::Runtime& runtime);

  bool useTurboModuleInterop(jsi::Runtime& runtime);

  bool useTurboModules(jsi::Runtime& runtime);
<<<<<<< HEAD

  double virtualViewPrerenderRatio(jsi::Runtime& runtime);
=======
>>>>>>> 2c830f7d0232ead70791aff6968a0e95ce850767
};

} // namespace facebook::react
